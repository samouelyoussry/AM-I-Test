name: Am I Covered Workflow (GCP Version)

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to build (e.g., service-a). Leave empty to build all.'
        required: false
        default: ''

jobs:
  determine-services:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set matrix with path mapping
        id: set-matrix
        run: |
          set -e
          declare -A SERVICE_PATH_MAP=(
            ["langfuse"]="src/services/langfuse"
            ["llm"]="src/services/llm"
          )
          SERVICES=("langfuse" "llm")
          if [ -n "$INPUT_SERVICE" ]; then
            if [[ -z "${SERVICE_PATH_MAP[$INPUT_SERVICE]}" ]]; then
              echo "ERROR: Invalid service name '${INPUT_SERVICE}'."
              exit 1
            fi
            SELECTED="{\"service\": \"${INPUT_SERVICE}\", \"dockerfile\": \"${SERVICE_PATH_MAP[$INPUT_SERVICE]}\"}"
            MATRIX="[${SELECTED}]"
          else
            MATRIX="["
            for service in "${SERVICES[@]}"; do
              path="${SERVICE_PATH_MAP[$service]}"
              if [ -n "$path" ]; then
                MATRIX="${MATRIX}{\"service\": \"${service}\", \"dockerfile\": \"${path}\"},"
              fi
            done
            MATRIX="${MATRIX%,}]"
          fi
          echo "Final Matrix JSON: $MATRIX"  
          ##########
          printf "matrix={\"include\":%s}\n" "$MATRIX" >> "$GITHUB_OUTPUT"
        env:
          INPUT_SERVICE: ${{ github.event.inputs.service }}

  build:
    needs: determine-services
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.tag.outputs.image_tag }}
    strategy:
      matrix: ${{ fromJson(needs.determine-services.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      ### CHANGED FOR GCP: Authenticate to GCP using Service Account key
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      ### CHANGED FOR GCP: Setup gcloud CLI
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      ### CHANGED FOR GCP: Configure Docker for Artifact Registry
      - name: Configure Docker for GCP Artifact Registry
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev

      - name: Build and push image to Artifact Registry
        run: |
          set -e
          IMAGE_NAME=${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPOSITORY }}/amicovered-${{ matrix.service }}

          COMMIT_MSG=$(git log -1 --pretty=%s -- $(dirname "${{ matrix.dockerfile }}"))
          TAG=$(echo "$COMMIT_MSG" | tr ' ' '-' | tr -cd '[:alnum:]-' | cut -c1-50)
          if [ -z "$TAG" ]; then
            TAG="build-$(git rev-parse --short HEAD)"
          else
            TAG="$TAG-$(git rev-parse --short HEAD)"
          fi

          echo "Building image: $IMAGE_NAME:$TAG"
          BUILD_CONTEXT=$(dirname "${{ matrix.dockerfile }}")
          docker build -t $IMAGE_NAME:$TAG -f ${{ matrix.dockerfile }} $BUILD_CONTEXT
          docker push $IMAGE_NAME:$TAG

      - name: Expose image tag
        id: tag
        run: echo "image_tag=$IMAGE_NAME:$TAG" >> "$GITHUB_OUTPUT"

  deploy:
    name: Deploy to GCP Cloud Run
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.determine-services.outputs.matrix) }}
    steps:
      ### CHANGED FOR GCP: Authenticate again (per job)
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Recompute image tag
        id: tag
        run: |
          set -e
          IMAGE_NAME=${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPOSITORY }}/amicovered-${{ matrix.service }}
          COMMIT_MSG=$(git log -1 --pretty=%s -- $(dirname "${{ matrix.dockerfile }}"))
          TAG=$(echo "$COMMIT_MSG" | tr ' ' '-' | tr -cd '[:alnum:]-' | cut -c1-50)
          if [ -z "$TAG" ]; then
            TAG="build-$(git rev-parse --short HEAD)"
          else
            TAG="$TAG-$(git rev-parse --short HEAD)"
          fi
          echo "IMAGE_TAG=$IMAGE_NAME:$TAG" >> $GITHUB_ENV

      ### CHANGED FOR GCP: Deploy to Cloud Run
      - name: Deploy to Cloud Run
        run: |
          set -e
          SERVICE_NAME=${{ matrix.service }}
          echo "Deploying $IMAGE_TAG to Cloud Run as service: $SERVICE_NAME"

          gcloud run deploy $SERVICE_NAME \
            --image $IMAGE_TAG \
            --platform managed \
            --region ${{ secrets.GCP_REGION }} \
            --allow-unauthenticated \
            --project ${{ secrets.GCP_PROJECT_ID }}
